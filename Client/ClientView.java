/**
 * FileName: ClientView.java
 * Author: Warsame Egal, 040693092
 * Course CST8221 - JAP, Lab Section 302
 * @version 1 
 * Assignment: 2 part 2 
 * Date April 21, 2016 
 * Professor: Svillen Ranev
 * Purpose: Client server GUI application
 * @author Warsame Egal
 * @version 1
 * @since 1.80_65
 */package Client;

import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetSocketAddress;
import java.nio.channels.SocketChannel;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author warsame
 */
public class ClientView extends javax.swing.JFrame {

    private SocketChannel socketChannel;
    private ObjectInputStream inputStream;
    private ObjectOutputStream outputStream;

    /**
     * Creates new form ClientGui
     */
    public ClientView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setConnection = new javax.swing.JPanel();
        portLabel = new javax.swing.JLabel();
        hostLabel = new javax.swing.JLabel();
        portComboBox = new javax.swing.JComboBox<>();
        connectButton = new javax.swing.JButton();
        hostTextField = new javax.swing.JTextField();
        clientRequest = new javax.swing.JPanel();
        serverTextField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        terminal = new javax.swing.JPanel();
        textScrollPane = new javax.swing.JScrollPane();
        terminalTextField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Warsame's Client");
        setMaximumSize(new java.awt.Dimension(600, 550));
        setMinimumSize(new java.awt.Dimension(600, 550));

        setConnection.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red, 10), "SET CONNECTION", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        setConnection.setMaximumSize(new java.awt.Dimension(580, 530));

        portLabel.setDisplayedMnemonic('P');
        portLabel.setLabelFor(portComboBox);
        portLabel.setText("Port:");
        portLabel.setMaximumSize(null);
        portLabel.setMinimumSize(null);
        portLabel.setPreferredSize(null);

        hostLabel.setDisplayedMnemonic('H');
        hostLabel.setLabelFor(hostTextField);
        hostLabel.setText("Host:");
        hostLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        hostLabel.setMaximumSize(null);
        hostLabel.setMinimumSize(null);
        hostLabel.setPreferredSize(null);

        portComboBox.setEditable(true);
        portComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "8088", "65000", "65535" }));
        portComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portComboBoxActionPerformed(evt);
            }
        });

        connectButton.setBackground(java.awt.Color.red);
        connectButton.setMnemonic('C');
        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        hostTextField.setText("localhost");
        hostTextField.setCaretPosition(0);
        hostTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        hostTextField.setMargin(new java.awt.Insets(2, 4, 2, 2));
        hostTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setConnectionLayout = new javax.swing.GroupLayout(setConnection);
        setConnection.setLayout(setConnectionLayout);
        setConnectionLayout.setHorizontalGroup(
            setConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setConnectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(setConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(setConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setConnectionLayout.createSequentialGroup()
                        .addComponent(portComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)
                        .addGap(0, 288, Short.MAX_VALUE))
                    .addComponent(hostTextField))
                .addContainerGap())
        );

        setConnectionLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {connectButton, portComboBox});

        setConnectionLayout.setVerticalGroup(
            setConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setConnectionLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(setConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(setConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clientRequest.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 10), "CLIENT REQUEST", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        serverTextField.setText("Type a server request line");
        serverTextField.setMaximumSize(new java.awt.Dimension(40, 40));
        serverTextField.setMinimumSize(new java.awt.Dimension(40, 40));

        sendButton.setMnemonic('S');
        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout clientRequestLayout = new javax.swing.GroupLayout(clientRequest);
        clientRequest.setLayout(clientRequestLayout);
        clientRequestLayout.setHorizontalGroup(
            clientRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientRequestLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        clientRequestLayout.setVerticalGroup(
            clientRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientRequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(serverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(sendButton))
        );

        clientRequestLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sendButton, serverTextField});

        terminal.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.blue, 10), "TERMINAL", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        textScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        terminalTextField.setEditable(false);
        terminalTextField.setColumns(20);
        terminalTextField.setRows(5);
        textScrollPane.setViewportView(terminalTextField);

        javax.swing.GroupLayout terminalLayout = new javax.swing.GroupLayout(terminal);
        terminal.setLayout(terminalLayout);
        terminalLayout.setHorizontalGroup(
            terminalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textScrollPane)
        );
        terminalLayout.setVerticalGroup(
            terminalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(terminal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(setConnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(terminal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed

        int port;

        port = Integer.valueOf((String) portComboBox.getSelectedItem());

        // Get the host
        String hostname = hostTextField.getText();

        try {
            // Create a socket to connect to the server
            socketChannel = SocketChannel.open(new InetSocketAddress(hostname, port));
        } catch (IOException ex) {
            Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        try {
            outputStream = new ObjectOutputStream(socketChannel.socket().getOutputStream());
        } catch (IOException ex) {
            Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        try {
            inputStream = new ObjectInputStream(socketChannel.socket().getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        // Disable Connect button and change the color
        connectButton.setEnabled(false);
        connectButton.setBackground(Color.BLUE);

        // Enable send button
        sendButton.setEnabled(true);

        terminalTextField.setText("Connected to " + socketChannel.socket());

    }//GEN-LAST:event_connectButtonActionPerformed

    private void portComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portComboBoxActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // Send the request to the server
        String request = serverTextField.getText();
        try {
            outputStream.writeObject(request);
        } catch (IOException ex) {
            Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        // Receive the response            
        String response;
        try {
            response = (String) inputStream.readObject();
        } catch (IOException | ClassNotFoundException ex) {
            return;
        }

        // parse the response
        if (response.equals("CLS")) {
            // Clear the terminal
            terminalTextField.setText("");
            return;
        } else if (response.equals("SERVER>Connection closed.")) {
            /*close the ouput input and socket streams*/
            try {
                outputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            try {
                inputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            try {
                socketChannel.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            terminalTextField.append("\n" + response);
            terminalTextField.append("\n" + "CLIENT>Connection closed.");
            sendButton.setEnabled(false); //disable the send button
            connectButton.setEnabled(true); //enable the connect button
            connectButton.setBackground(Color.red); //change the color
            return;
        }

        // Print the response
        terminalTextField.append("\n" + response);
    }//GEN-LAST:event_sendButtonActionPerformed

    private void hostTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel clientRequest;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JComboBox<String> portComboBox;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField serverTextField;
    private javax.swing.JPanel setConnection;
    private javax.swing.JPanel terminal;
    private javax.swing.JTextArea terminalTextField;
    private javax.swing.JScrollPane textScrollPane;
    // End of variables declaration//GEN-END:variables
}
